{
	"common": {
		"name": "acceptdata",
		"version": "0.2.1",
		"news": {
			"0.2.1": {
				"en": "Added Tables"
			},
			"0.0.1": {
				"en": "initial release",
				"de": "Erstveröffentlichung",
				"ru": "Начальная версия",
				"pt": "lançamento inicial",
				"nl": "Eerste uitgave",
				"fr": "Première version",
				"it": "Versione iniziale",
				"es": "Versión inicial",
				"pl": "Pierwsze wydanie",
				"zh-cn": "首次出版"
			}
		},
		"title": "Accept Data via network",
		"titleLang": {
			"en": "Accept Data via network",
			"de": "Daten über das Netzwerk akzeptieren",
			"ru": "Принять данные через сеть",
			"pt": "Aceitar dados via rede",
			"nl": "Accepteer gegevens via het netwerk",
			"fr": "Accepter les données via le réseau",
			"it": "Accetta dati tramite rete",
			"es": "Aceptar datos a través de la red",
			"pl": "Akceptuj dane przez sieć",
			"zh-cn": "通过网络接受数据"
		},
		"desc": {
			"en": "Accept Data can be used as a destination for devices which generate data and can post it to a device on a network in JSON or URL format",
			"de": "Daten akzeptieren kann als Ziel für Geräte verwendet werden, die Daten generieren und diese im JSON- oder URL-Format an ein Gerät in einem Netzwerk senden",
			"ru": "Принять данные можно использовать в качестве места назначения для устройств, которые генерируют данные и могут публиковать их на устройстве в сети в формате JSON или URL",
			"pt": "Accept Data pode ser usado como destino para dispositivos que geram dados e pode publicá-los em um dispositivo em uma rede no formato JSON ou URL",
			"nl": "Accepteer gegevens kan worden gebruikt als bestemming voor apparaten die gegevens genereren en deze op een apparaat in een netwerk in JSON- of URL-indeling kunnen plaatsen",
			"fr": "Accepter les données peuvent être utilisées comme destination pour les appareils qui génèrent des données et peuvent les publier sur un appareil sur un réseau au format JSON ou URL",
			"it": "Accetta I dati possono essere utilizzati come destinazione per i dispositivi che generano dati e possono pubblicarli su un dispositivo su una rete in formato JSON o URL",
			"es": "Aceptar Los datos se pueden usar como destino para dispositivos que generan datos y pueden publicarlos en un dispositivo en una red en formato JSON o URL",
			"pl": "Akceptuj Dane mogą być używane jako miejsce docelowe dla urządzeń generujących dane i mogą wysyłać je do urządzenia w sieci w formacie JSON lub URL",
			"zh-cn": "接受数据可以用作生成数据的设备的目标，并可以将其以JSON或URL格式发布到网络上的设备"
		},
		"authors": [
			"frankjoke <frankjoke@hotmail.com>"
		],
		"keywords": [
			"JSON",
			"URL",
			"GET",
			"POST"
		],
		"license": "MIT",
		"platform": "Javascript/Node.js",
		"main": "acceptdata.js",
		"icon": "acceptdata.png",
		"enabled": true,
		"extIcon": "https://raw.githubusercontent.com/frankjoke/ioBroker.acceptdata/master/admin/acceptdata.png",
		"readme": "https://github.com/frankjoke/ioBroker.acceptdata/blob/master/README.md",
		"loglevel": "info",
		"mode": "daemon",
		"type": "communication",
		"compact": true,
		"connectionType": "local",
		"dataSource": "push",
		"materialize": false,
		"dependencies": [
			{
				"js-controller": ">=1.4.2"
			}
		]
	},
	"configTool": [
		{
			"label": "Config",
			"icon": "mdi-cog",
			"items": [
				{
					"type": "number",
					"min": 1000,
					"max": 65000,
					"label": "Port",
					"placeholder": "Enter port address on which iobroker will listen to your request",
					"hint": "Port to listen on >1000 & <65000",
					"value": "port",
					"sm3":true,
					"prepend-icon": "mdi-home-import-outline",
					"rules": ["numberRule"],
					"cols": 3
				},
				{
					"type": "html",
					"label": "For Path field:",
					"text": [
						"The external device can connect to the adapter's server using following example:",
						"<code>http://iobroker-server:port/<strong>path</strong>?data=...</code>"],
					"style": "width='98%'",
					"cols": 9
				},
				{
					"type": "html",
					"label": "For Method field:",
					"text": [
						"Either <code>GET</code> or <code>POST</code> is supported.",
						"By entering the below URL in your browser (changing iobroker-server to your server name or ip) you can test the 'Test' entry:" ,
						"<a target='_blank' href='http://localhost:3000/Test?what=ok&length_$m=12&temp_$%C2%B0F=13&speed_$mp/h=88'>http://localhost:3000/Test?what=ok&length_$m=12&temp_$%C2%B0F=13&speed_$mp/h=88</a>"],
					"style": "width='98%'",
					"eval": "$.text[2] = $.text[2].replace('localhost:',that.iobrokerHostConnection.hostname + ':')",
					"cols": 3
				},
				{
					"type": "text",
					"label": "For Convert field:",
					"html": "Conversion receives data as variable $ and can convert it to some new format which will then be stored in state(s) named with path.<br>example: '{ tempC: FtoC($.tempf, 1) }' where FtoC an internal conversion for Farenheit to Celsius is.<br>Other functions are <code>toNum(str, digits_after_comma), CtoF(..) and ItoMM(...)</code><br>The field names can end with '_' and type/unit information. The text after the '_' will be the type like with '_date', or if type should be number with specific unit you can name it '_$km/h'. There are some predefined types available as well which can be named directly (without $): <strong>'Hum', 'Kmh', 'Deg', 'Date', 'Hpa', 'Mm', 'Wm2', 'Txt', 'C', 'V'</strong> where V is just a number Value, the many of the other set also roles.",
					"style": "width='98%'",
					"cols": 9
				},
				{
					"ruler": "hr"
				},
				{
					"type": "table",
					"label": "Path Table",
					"value": "pathtable",
					"disable-sort": true,
					"cols": 12,
					"items": [
						{
							"text": "Path",
							"type": "string",
							"value": "path",
							"align": "start",
							"rules": ["uniqueTableRule"],
							"sortable": true,
							"divider": true,
							"default": "new path",
							"width": "19%"
						  },
						  {
							"text": "Method",
							"type": "select",
							"select": ["GET","POST"],
							"value": "method",
							"align": "center",
							"sortable": false,
							"divider": true,
							"width": "8%"
						  },
						  {
							"text": "Convert",
							"value": "convert",
							"type": "textarea",
							"align": "start",
							"default": "$",
							"sortable": true,
							"divider": true,
							"width": "60%"
						  },
						  {
							"text": "Enabled",
							"type": "checkbox",
							"value": "enabled",
							"sortable": false,
							"align": "center",
							"divider": true,
							"width": "5%"
						  }
					]
				}

			]
		},
		{
			"label": "Contact",
			"icon": "mdi-phone",
			"items": [
				{
					"typer": "text",
					"label": "For Path field:",
					"html": "The external device can connect to the adapter's server using following path: example `http://iobroker-server:port/<strong>path</strong>?data=...`",
					"sm4": true,
					"class": "pa-1 align-self-end",
					"style": "width='98%'",
					"cols": 2
				},
				{
					"type": "string",
					"label": "String",
					"placeholder": "Enter HTML...",
					"value": "string1",
					"prepend-icon": "mdi-home-import-outline",
					"rules": ["($ && $.length>0) || 'String cannot be empty!'"],
					"cols": 3
				},
				{
					"ruler": "horizontal"
				},
				{
					"type": "checkbox",
					"label": "Checkbox",
					"value": "checkbox1",
					"cols": 2 
				},
				{
					"type": "chips",
					"label": "Chips",
					"value": "chips1",
					"select_O": ["aaa","bbb",3,5],
					"delimiters": [",",";"],
					"flat":true,
					"hint": "please enter: old device name = new device name",
					"rules": ["{const f = $.filter(i => i.indexOf('=')<1 || i.length <3); return !f.length ? true : `At least 3 chars and need to include an '=' after first position for ${f[0]}`;}"],
					"cols": 6
				},
				{
					"type": "checkbox",
					"value": "checkbox2"
				},
				{
					"ruler": "spacer",
					"type": "switch",
					"label": "Switch",
					"value": "checkbox1"
				},
				{
					"type": "text",
					"label": "Html Contact",
					"html": "Das ist<br>html",
					"attrs": {
						"sm4": true,
						"class": "pa-1"
					}
				},
				{
					"type": "vertical"
				},
				{
					"type": "text",
					"label": "Text Contact",
					"text": "Das ist Text",
					"attrs": {
						"sm4": true,
						"class": "pa-2 align-self-center"
					}
				}
			]
		}
	],
	"native": {
		"_configTool": [
			{
				"label": "Config",
				"icon": "mdi-cog",
				"items": [
					{
						"type": "number",
						"min": 1000,
						"max": 65000,
						"label": "Port",
						"placeholder": "Enter port address on which iobroker will listen to your request",
						"hint": "Port to listen on >1000 & <65000",
						"value": "port",
						"sm3":true,
						"prepend-icon": "mdi-home-import-outline",
						"rules": ["numberRule"],
						"cols": 3
					},
					{
						"type": "html",
						"label": "For Path field:",
						"text": [
							"The external device can connect to the adapter's server using following example:",
							"<code>http://iobroker-server:port/<strong>path</strong>?data=...</code>"],
						"style": "width='98%'",
						"cols": 9
					},
					{
						"type": "html",
						"label": "For Method field:",
						"text": [
							"Either <code>GET</code> or <code>POST</code> is supported.",
							"By entering the below URL in your browser (changing iobroker-server to your server name or ip) you can test the 'Test' entry:" ,
							"<a target='_blank' href='http://localhost:3000/Test?what=ok&length_$m=12&temp_$%C2%B0F=13&speed_$mp/h=88'>http://localhost:3000/Test?what=ok&length_$m=12&temp_$%C2%B0F=13&speed_$mp/h=88</a>"],
						"style": "width='98%'",
						"eval": "$.text[2] = $.text[2].replace(/localhost:/g,this.iobrokerHostConnection ? this.iobrokerHostConnection.hostname + ':' : 'my-iobroker-host:')",
						"cols": 3
					},
					{
						"type": "text",
						"label": "For Convert field:",
						"html": "Conversion receives data as variable $ and can convert it to some new format which will then be stored in state(s) named with path.<br>example: '{ tempC: FtoC($.tempf, 1) }' where FtoC an internal conversion for Farenheit to Celsius is.<br>Other functions are <code>toNum(str, digits_after_comma), CtoF(..) and ItoMM(...)</code><br>The field names can end with '_' and type/unit information. The text after the '_' will be the type like with '_date', or if type should be number with specific unit you can name it '_$km/h'. There are some predefined types available as well which can be named directly (without $): <strong>'Hum', 'Kmh', 'Deg', 'Date', 'Hpa', 'Mm', 'Wm2', 'Txt', 'C', 'V'</strong> where V is just a number Value, the many of the other set also roles.",
						"style": "width='98%'",
						"cols": 9
					},
					{
						"ruler": "hr"
					},
					{
						"type": "table",
						"label": "Path Table",
						"value": "pathtable",
						"disable-sort": true,
						"cols": 12,
						"items": [
							{
								"text": "Path",
								"type": "string",
								"value": "path",
								"align": "start",
								"rules": ["uniqueTableRule"],
								"sortable": true,
								"divider": true,
								"default": "new path",
								"width": "19%"
							  },
							  {
								"text": "Method",
								"type": "select",
								"select": ["GET","POST"],
								"value": "method",
								"align": "center",
								"sortable": false,
								"divider": true,
								"width": "8%"
							  },
							  {
								"text": "Convert",
								"value": "convert",
								"type": "textarea",
								"align": "start",
								"default": "$",
								"sortable": true,
								"divider": true,
								"width": "60%"
							  },
							  {
								"text": "Enabled",
								"type": "checkbox",
								"value": "enabled",
								"sortable": false,
								"align": "center",
								"divider": true,
								"width": "5%"
							  }
						]
					}
	
				]
			},
			{
				"label": "Contact",
				"icon": "mdi-phone",
				"items": [
					{
						"typer": "text",
						"label": "For Path field:",
						"html": "The external device can connect to the adapter's server using following path: example `http://iobroker-server:port/<strong>path</strong>?data=...`",
						"sm4": true,
						"class": "pa-1 align-self-end",
						"style": "width='98%'",
						"cols": 2
					},
					{
						"type": "string",
						"label": "String",
						"placeholder": "Enter HTML...",
						"value": "string1",
						"prepend-icon": "mdi-home-import-outline",
						"rules": ["($ && $.length>0) || 'String cannot be empty!'"],
						"cols": 3
					},
					{
						"ruler": "horizontal"
					},
					{
						"type": "checkbox",
						"label": "Checkbox",
						"value": "checkbox1",
						"cols": 2 
					},
					{
						"type": "chips",
						"label": "Chips",
						"value": "chips1",
						"select_O": ["aaa","bbb",3,5],
						"delimiters": [",",";"],
						"flat":true,
						"hint": "please enter: old device name = new device name",
						"rules": ["{const f = $.filter(i => i.indexOf('=')<1 || i.length <3); return !f.length ? true : `At least 3 chars and need to include an '=' after first position for ${f[0]}`;}"],
						"cols": 6
					},
					{
						"type": "checkbox",
						"value": "checkbox2"
					},
					{
						"ruler": "spacer",
						"type": "switch",
						"label": "Switch",
						"value": "checkbox1"
					},
					{
						"type": "text",
						"label": "Html Contact",
						"html": "Das ist<br>html",
						"attrs": {
							"sm4": true,
							"class": "pa-1"
						}
					},
					{
						"type": "vertical"
					},
					{
						"type": "text",
						"label": "Text Contact",
						"text": "Das ist Text",
						"attrs": {
							"sm4": true,
							"class": "pa-2 align-self-center"
						}
					}
				]
			}
		],
	
		"port": "3000",
		"pathtable": [
			{
				"path": "easyweather",
				"method": "GET",
				"convert": "{ outdoorTemp_C: FtoC($.tempf, 1), indoorTemp_C: FtoC($.indoortempf,1), dewPoint_C: FtoC($.dewptf,1), windChill_C: FtoC($.windchillf,1), indoorHumidity_Hum: toNum($.indoorhumidity), outdoorHumidity_Hum: toNum($.humidity), windSpeed_Kmh: toNum($.windspeed_mph*1.61,1), windGust_Kmh: toNum($.windgustmph*1.61,1), windDir_Deg: toNum($.winddir), lastUpdate_Date: new Date($.dateutc.split(\" \").join(\"T\")+\".0Z\"), absBaro_Hpa: toNum($.absbaromin * 33.862,0), baro_Hpa: toNum($.baromin * 33.862, 0), rain_Mm: ItoMM($.rainin), rainDaily_Mm: ItoMM($.dailyrainin,1), rainWeekly_Mm: ItoMM($.weeklyrainin,0), rainMonthly_Mm: ItoMM($.monthlyrainin,0), solarradiation_Wm2: toNum($.solarradiation,2), uv_V: Number($.UV), software_Txt: $.softwaretype}",
				"enabled": true
			},
			{
				"path": "Test",
				"method": "GET",
				"convert": "$",
				"enabled": true
			}
		]
	},
	"objects": [],
	"instanceObjects": [
		{
			"_id": "info",
			"type": "channel",
			"common": {
				"name": "Information"
			},
			"native": {}
		},
		{
			"_id": "info.connection",
			"type": "state",
			"common": {
				"role": "indicator.connected",
				"name": "Device or service connected",
				"type": "boolean",
				"read": true,
				"write": false,
				"def": false
			},
			"native": {}
		}
	]
}